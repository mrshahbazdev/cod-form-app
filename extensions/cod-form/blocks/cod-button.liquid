{% comment %}
  This file creates a popup modal (form) and a button to open it.
  It fetches locations and rates from the database, auto-detects the user's country via IP,
  and updates the cart summary dynamically.
{% endcomment %}

<style>
  .cod-modal-overlay {
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.6); z-index: 999999; display: none;
    align-items: flex-start;
    justify-content: center; overflow-y: auto; padding: 40px 15px;
    box-sizing: border-box;
  }
  .cod-modal-content {
    padding: 25px; border-radius: 8px; width: 100%; max-width: 500px;
    position: relative; box-shadow: 0 5px 15px rgba(0,0,0,0.3); margin: auto;
  }
  .cod-modal-close {
    position: absolute; top: 10px; right: 15px; font-size: 24px;
    font-weight: bold; cursor: pointer; border: none; background: none;
  }
  .cod-form-field { margin-bottom: 15px; }
  .cod-form-field label { display: block; margin-bottom: 5px; font-weight: 600; }
  .cod-form-field input, .cod-form-field select {
    width: 100%; padding: 10px; border: 1px solid #ccc;
    border-radius: 4px; box-sizing: border-box;
  }
  .cod-form-error { color: red; font-size: 0.9em; margin-top: 5px; display: none; }
  .cod-submit-btn {
    width: 100%; padding: 12px; border: none; border-radius: 4px;
    font-weight: bold; cursor: pointer; font-size: 16px;
  }
  #cod-form-message { margin-top: 15px; text-align: center; }
  .cod-cart-summary { margin-bottom: 20px; }
  .cod-cart-item { display: flex; align-items: center; margin-bottom: 15px; }
  .cod-cart-item img { width: 60px; height: 60px; object-fit: cover; border-radius: 4px; margin-right: 15px; }
  .cod-cart-item-details { flex-grow: 1; }
  .cod-cart-item-title { font-weight: bold; }
  .cod-cart-item-price { text-align: right; }
  .cod-price-details { margin-top: 20px; border-top: 1px solid #eee; padding-top: 15px; }
  .cod-price-row { display: flex; justify-content: space-between; margin-bottom: 8px; }
  .cod-price-row.total { font-weight: bold; font-size: 1.1em; }
</style>

<div class="card">
  <button id="open-cod-modal-btn-{{ section.id }}-{{ block.id }}" class="button button--primary" style="background-color: {{ block.settings.button_color }}; color: {{ block.settings.text_color }};">
    {{ block.settings.button_text }}
  </button>
</div>

<div id="cod-modal-{{ section.id }}-{{ block.id }}" class="cod-modal-overlay">
  <div class="cod-modal-content" style="background-color: {{ block.settings.form_bg_color }}; color: {{ block.settings.form_text_color }};">
    <button id="cod-modal-close-btn-{{ section.id }}-{{ block.id }}" class="cod-modal-close" style="color: {{ block.settings.form_text_color }};">&times;</button>
    <h2>{{ block.settings.form_title }}</h2>

    <div id="cod-cart-summary-{{ section.id }}-{{ block.id }}" class="cod-cart-summary"></div>

    <p>{{ block.settings.form_subtitle }}</p>
    <hr style="margin: 15px 0;">
    <form id="cod-form-{{ section.id }}-{{ block.id }}" novalidate>
      <div class="cod-form-field">
        <label for="cod-name-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Your name *</label>
        <input type="text" id="cod-name-{{ section.id }}-{{ block.id }}" name="name" required>
      </div>

      {% if block.settings.show_phone_field %}
        <div class="cod-form-field">
          <label for="cod-phone-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Phone number *</label>
          <input type="tel" id="cod-phone-{{ section.id }}-{{ block.id }}" name="phone" required>
          <div id="cod-phone-error-{{ section.id }}-{{ block.id }}" class="cod-form-error"></div>
        </div>
      {% endif %}

      {% if block.settings.show_email_field %}
        <div class="cod-form-field">
          <label for="cod-email-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Email</label>
          <input type="email" id="cod-email-{{ section.id }}-{{ block.id }}" name="email">
        </div>
      {% endif %}

      <div class="cod-form-field">
        <label for="cod-country-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Country *</label>
        <select id="cod-country-{{ section.id }}-{{ block.id }}" name="country" required></select>
      </div>

      {% if block.settings.show_address_field %}
        <div class="cod-form-field">
          <label for="cod-address-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Address *</label>
          <input type="text" id="cod-address-{{ section.id }}-{{ block.id }}" name="address" required>
        </div>
      {% endif %}

      {% if block.settings.show_city_field %}
        <div class="cod-form-field">
          <label for="cod-city-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">City *</label>
          <select id="cod-city-{{ section.id }}-{{ block.id }}" name="city" required></select>
        </div>
      {% endif %}

      <div class="cod-form-field">
        <label for="cod-province-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Province / State *</label>
        <input type="text" id="cod-province-{{ section.id }}-{{ block.id }}" name="province" required>
      </div>
      <button type="submit" class="cod-submit-btn" style="background-color: {{ block.settings.button_color }}; color: {{ block.settings.text_color }};">COMPLETE ORDER</button>
      <div id="cod-form-message-{{ section.id }}-{{ block.id }}"></div>
    </form>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const uniqueId = "-{{ section.id }}-{{ block.id }}";
  const openBtn = document.getElementById('open-cod-modal-btn' + uniqueId);
  const modal = document.getElementById('cod-modal' + uniqueId);
  const closeBtn = document.getElementById('cod-modal-close-btn' + uniqueId);
  const codForm = document.getElementById('cod-form' + uniqueId);
  const messageDiv = document.getElementById('cod-form-message' + uniqueId);
  const submitBtn = codForm.querySelector('.cod-submit-btn');
  const cartSummaryContainer = document.getElementById('cod-cart-summary' + uniqueId);
  const countrySelect = document.getElementById('cod-country' + uniqueId);
  const citySelect = document.getElementById('cod-city' + uniqueId);

  let locationData = {};
  let currentCart = null;

  const updateCartSummary = () => {
    if (!currentCart) return;

    cartSummaryContainer.innerHTML = '';

    currentCart.items.forEach(item => {
      const itemHtml = `
        <div class="cod-cart-item">
          <img src="${item.image}" alt="${item.title}">
          <div class="cod-cart-item-details">
            <div class="cod-cart-item-title">${item.product_title}</div>
            <div>${item.variant_title || ''}</div>
            <div>Qty: ${item.quantity}</div>
          </div>
          <div class="cod-cart-item-price">Rs. ${(item.final_line_price / 100).toFixed(2)}</div>
        </div>
      `;
      cartSummaryContainer.innerHTML += itemHtml;
    });

    const selectedCountry = countrySelect.value;
    const selectedCity = citySelect.value.toLowerCase();
    const countryInfo = locationData[selectedCountry];

    let shippingInfo = countryInfo?.rates['default'] || { rate: {{ block.settings.default_shipping_rate }}, currency: 'PKR' };
    if (countryInfo?.rates[selectedCity]) {
      shippingInfo = countryInfo.rates[selectedCity];
    }

    const subtotal = currentCart.total_price;
    const total = subtotal + (shippingInfo.rate * 100);

    const priceDetailsHtml = `
      <div class="cod-price-details">
        <div class="cod-price-row">
          <span>Subtotal</span>
          <span>${shippingInfo.currency} ${(subtotal / 100).toFixed(2)}</span>
        </div>
        <div class="cod-price-row">
          <span>Shipping</span>
          <span>${shippingInfo.currency} ${shippingInfo.rate.toFixed(2)}</span>
        </div>
        <div class="cod-price-row total">
          <span>Total</span>
          <span>${shippingInfo.currency} ${(total / 100).toFixed(2)}</span>
        </div>
      </div>
    `;
    cartSummaryContainer.innerHTML += priceDetailsHtml;
  };

  const updateCities = () => {
    const selectedCountry = countrySelect.value;
    citySelect.innerHTML = '<option value="">Select City</option>';
    if (locationData[selectedCountry] && locationData[selectedCountry].cities) {
      locationData[selectedCountry].cities.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        option.textContent = city;
        citySelect.appendChild(option);
      });
    }
  };

  countrySelect.addEventListener('change', () => {
    updateCities();
    updateCartSummary();
  });
  citySelect.addEventListener('change', updateCartSummary);

  openBtn.addEventListener('click', async () => {
    openBtn.innerText = 'LOADING...';
    openBtn.disabled = true;

    try {
      const [locationsRes, ipRes] = await Promise.all([
        fetch('/apps/cod-proxy/get-locations'),
        fetch('/apps/cod-proxy/get-country-by-ip')
      ]);

      const { locations } = await locationsRes.json();
      const { country: userCountry } = await ipRes.json();
      locationData = locations;

      countrySelect.innerHTML = '';
      for (const code in locationData) {
        const option = document.createElement('option');
        option.value = code;
        option.textContent = locationData[code].name;
        countrySelect.appendChild(option);
      }

      if (locationData[userCountry]) {
        countrySelect.value = userCountry;
        countrySelect.disabled = true;
      }

      updateCities();

      const productForm = document.querySelector('form[action="/cart/add"]');
      if (productForm) {
        const formData = new FormData(productForm);
        await fetch('/cart/add.js', { method: 'POST', body: formData });
      }

      const updatedCartResponse = await fetch('/cart.js');
      currentCart = await updatedCartResponse.json();

      updateCartSummary();

      const cartCountElements = document.querySelectorAll('.cart-count-bubble, .site-header__cart-count, [data-cart-count]');
      cartCountElements.forEach(el => {
        el.textContent = currentCart.item_count;
      });
      document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: { cart: currentCart } }));

      modal.style.display = 'flex';
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred.');
    } finally {
      openBtn.innerText = "{{ block.settings.button_text | escape }}";
      openBtn.disabled = false;
    }
  });

  closeBtn.addEventListener('click', () => { modal.style.display = 'none'; });
  modal.addEventListener('click', (event) => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });

  codForm.addEventListener('submit', async (event) => {
    event.preventDefault();

    const originalBtnText = submitBtn.innerText;
    submitBtn.innerText = 'PROCESSING...';
    submitBtn.disabled = true;
    messageDiv.innerText = '';

    let isValid = true;
    const phoneInput = document.getElementById('cod-phone' + uniqueId);
    if (phoneInput) {
      const phoneErrorDiv = document.getElementById('cod-phone-error' + uniqueId);
      if (!phoneInput.value) { // Simple check if phone is empty
        phoneErrorDiv.innerText = "Phone number is required.";
        phoneErrorDiv.style.display = 'block';
        isValid = false;
      } else {
        phoneErrorDiv.style.display = 'none';
      }
    }
    if (!codForm.checkValidity()) {
        isValid = false;
    }
    if (!isValid) {
      messageDiv.style.color = 'red';
      messageDiv.innerText = 'Please fill out all required fields correctly.';
      submitBtn.innerText = originalBtnText;
      submitBtn.disabled = false;
      return;
    }

    const cartResponse = await fetch('/cart.js');
    const cart = await cartResponse.json();

    if (cart.items.length === 0) {
      messageDiv.style.color = 'red';
      messageDiv.innerText = 'Your cart is empty.';
      submitBtn.innerText = originalBtnText;
      submitBtn.disabled = false;
      return;
    }

    const formData = new FormData(codForm);
    const customerDetails = {
      name: formData.get('name'),
      phone: formData.get('phone'),
      email: formData.get('email'),
      address: formData.get('address'),
      city: formData.get('city'),
      province: formData.get('province'),
      country: formData.get('country')
    };

    const selectedCountry = customerDetails.country;
    const selectedCity = customerDetails.city.toLowerCase();
    const countryInfo = locationData[selectedCountry];
    let shippingInfo = countryInfo?.rates['default'] || { rate: {{ block.settings.default_shipping_rate }}, currency: 'PKR' };
    if (countryInfo?.rates[selectedCity]) {
      shippingInfo = countryInfo.rates[selectedCity];
    }

    try {
      const backendResponse = await fetch('/apps/cod-proxy/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cartItems: cart.items,
          customer: customerDetails,
          shippingInfo: shippingInfo
        }),
      });

      const result = await backendResponse.json();

      if (result.success) {
        messageDiv.style.color = 'green';
        messageDiv.innerText = 'Order placed successfully! Clearing cart...';
        await fetch('/cart/clear.js', { method: 'POST' });

        let redirectUrl = '/pages/thank-you';
        if (result.orderId) {
          redirectUrl += `?order_id=${result.orderId}`;
        }
        window.location.href = redirectUrl;

      } else {
        throw new Error(result.error || 'Failed to create order.');
      }
    } catch (error) {
      console.error('Error:', error);
      messageDiv.style.color = 'red';
      messageDiv.innerText = 'An error occurred: ' + error.message;
      submitBtn.innerText = originalBtnText;
      submitBtn.disabled = false;
    }
  });
});
</script>

{% schema %}
{
  "name": "Popup COD Form",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Buy with Cash on Delivery"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#008060"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Button Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Form Settings"
    },
    {
      "type": "text",
      "id": "form_title",
      "label": "Form Title",
      "default": "Cash on Delivery"
    },
    {
      "type": "text",
      "id": "form_subtitle",
      "label": "Form Subtitle",
      "default": "Please enter your shipping address to complete the order."
    },
    {
      "type": "color",
      "id": "form_bg_color",
      "label": "Form Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "form_text_color",
      "label": "Form Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "form_label_color",
      "label": "Form Label Color",
      "default": "#333333"
    },
    {
      "type": "checkbox",
      "id": "show_phone_field",
      "label": "Show phone number field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_email_field",
      "label": "Show email field",
      "default": false
    },
    {
        "type": "checkbox",
        "id": "show_address_field",
        "label": "Show address field",
        "default": true
    },
    {
        "type": "checkbox",
        "id": "show_city_field",
        "label": "Show city field",
        "default": true
    },
    {
      "type": "header",
      "content": "Shipping Settings"
    },
    {
      "type": "number",
      "id": "default_shipping_rate",
      "label": "Default Shipping Rate (PKR)",
      "info": "This rate will be used if no specific rate is set for a city.",
      "default": 250
    }
  ]
}
{% endschema %}
