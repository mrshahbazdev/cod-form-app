{% comment %}
  This file creates a popup modal (form) and a button to open it.
  When clicked on a product page or collection, it first adds the product to the cart, then opens the form.
  The merchant can customize the button text, colors, and form fields from the theme editor.
{% endcomment %}

<style>
  .cod-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 999999;
    display: none;
    align-items: center;
    justify-content: center;
    overflow-y: auto;
    padding: 20px 0;
  }
  .cod-modal-content {
    padding: 25px;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    position: relative;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    margin: auto;
  }
  .cod-modal-close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    border: none;
    background: none;
  }
  .cod-form-field {
    margin-bottom: 15px;
  }
  .cod-form-field label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
  }
  .cod-form-field input, .cod-form-field select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
  }
  .cod-form-error {
    color: red;
    font-size: 0.9em;
    margin-top: 5px;
    display: none;
  }
  .cod-submit-btn {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 4px;
    font-weight: bold;
    cursor: pointer;
    font-size: 16px;
  }
  #cod-form-message {
    margin-top: 15px;
    text-align: center;
  }
</style>

<div class="card">
  <button id="open-cod-modal-btn-{{ section.id }}-{{ block.id }}" class="button button--primary" style="background-color: {{ block.settings.button_color }}; color: {{ block.settings.text_color }};">
    {{ block.settings.button_text }}
  </button>
</div>

<div id="cod-modal-{{ section.id }}-{{ block.id }}" class="cod-modal-overlay">
  <div class="cod-modal-content" style="background-color: {{ block.settings.form_bg_color }}; color: {{ block.settings.form_text_color }};">
    <button id="cod-modal-close-btn-{{ section.id }}-{{ block.id }}" class="cod-modal-close" style="color: {{ block.settings.form_text_color }};">&times;</button>
    <h2>{{ block.settings.form_title }}</h2>
    <p>{{ block.settings.form_subtitle }}</p>
    <hr style="margin: 15px 0;">
    <form id="cod-form-{{ section.id }}-{{ block.id }}" novalidate>
      <div class="cod-form-field">
        <label for="cod-name-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Your name *</label>
        <input type="text" id="cod-name-{{ section.id }}-{{ block.id }}" name="name" required>
      </div>

      {% if block.settings.show_phone_field %}
        <div class="cod-form-field">
          <label for="cod-phone-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Phone number *</label>
          <input
            type="tel"
            id="cod-phone-{{ section.id }}-{{ block.id }}"
            name="phone"
            required
            pattern="^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$"
            title="Please enter a valid Pakistani phone number (e.g., 03001234567)">
          <div id="cod-phone-error-{{ section.id }}-{{ block.id }}" class="cod-form-error"></div>
        </div>
      {% endif %}

      {% if block.settings.show_email_field %}
        <div class="cod-form-field">
          <label for="cod-email-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Email</label>
          <input type="email" id="cod-email-{{ section.id }}-{{ block.id }}" name="email">
        </div>
      {% endif %}

      {% if block.settings.show_address_field %}
        <div class="cod-form-field">
          <label for="cod-address-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Address *</label>
          <input type="text" id="cod-address-{{ section.id }}-{{ block.id }}" name="address" required>
        </div>
      {% endif %}

      {% if block.settings.show_city_field %}
        <div class="cod-form-field">
          <label for="cod-city-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">City *</label>
          <input type="text" id="cod-city-{{ section.id }}-{{ block.id }}" name="city" required>
        </div>
      {% endif %}

      <div class="cod-form-field">
        <label for="cod-province-{{ section.id }}-{{ block.id }}" style="color: {{ block.settings.form_label_color }};">Province *</label>
        <select id="cod-province-{{ section.id }}-{{ block.id }}" name="province" required>
          <option value="">Select Province</option>
          <option value="Punjab">Punjab</option>
          <option value="Sindh">Sindh</option>
          <option value="Khyber Pakhtunkhwa">Khyber Pakhtunkhwa</option>
          <option value="Balochistan">Balochistan</option>
          <option value="Gilgit-Baltistan">Gilgit-Baltistan</option>
          <option value="Azad Kashmir">Azad Kashmir</option>
          <option value="Islamabad Capital Territory">Islamabad Capital Territory</option>
        </select>
      </div>
      <button type="submit" class="cod-submit-btn" style="background-color: {{ block.settings.button_color }}; color: {{ block.settings.text_color }};">COMPLETE ORDER</button>
      <div id="cod-form-message-{{ section.id }}-{{ block.id }}"></div>
    </form>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const uniqueId = "-{{ section.id }}-{{ block.id }}";
  const openBtn = document.getElementById('open-cod-modal-btn' + uniqueId);
  const modal = document.getElementById('cod-modal' + uniqueId);
  const closeBtn = document.getElementById('cod-modal-close-btn' + uniqueId);
  const codForm = document.getElementById('cod-form' + uniqueId);
  const messageDiv = document.getElementById('cod-form-message' + uniqueId);
  const submitBtn = codForm.querySelector('.cod-submit-btn');

  // Modal display logic
  openBtn.addEventListener('click', async () => {
    // NAYI TABDEELI: Ab yeh code har jagah kaam karega
    let variantId = null;
    const productForm = document.querySelector('form[action="/cart/add"]'); // Product page form
    const productCard = openBtn.closest('[data-product-id], .product-card, .grid__item'); // Collection/Featured product card

    if (productForm) {
      const formData = new FormData(productForm);
      variantId = formData.get('id');
    } else if (productCard) {
      const variantInput = productCard.querySelector('input[name="id"]');
      if (variantInput) {
        variantId = variantInput.value;
      }
    }

    if (!variantId) {
      // Agar variant ID na mile (maslan, cart page par), to direct modal khol dein
      modal.style.display = 'flex';
      return;
    }

    openBtn.innerText = 'ADDING...';
    openBtn.disabled = true;

    try {
      const formData = new FormData();
      formData.append('id', variantId);
      formData.append('quantity', 1);

      const response = await fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.description || 'Could not add product to cart.');
      }

      const updatedCartResponse = await fetch('/cart.js');
      const updatedCart = await updatedCartResponse.json();
      const itemCount = updatedCart.item_count;

      const cartCountElements = document.querySelectorAll('.cart-count-bubble, .site-header__cart-count, [data-cart-count]');
      cartCountElements.forEach(el => {
        el.textContent = itemCount;
      });

      document.dispatchEvent(new CustomEvent('cart:updated', {
        bubbles: true,
        detail: { cart: updatedCart }
      }));

      modal.style.display = 'flex';

    } catch (error) {
      console.error('Add to cart error:', error);
      alert('Error: ' + error.message);
    } finally {
      openBtn.innerText = "{{ block.settings.button_text | escape }}";
      openBtn.disabled = false;
    }
  });

  closeBtn.addEventListener('click', () => { modal.style.display = 'none'; });
  modal.addEventListener('click', (event) => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });

  codForm.addEventListener('submit', async (event) => {
    event.preventDefault();

    const originalBtnText = submitBtn.innerText;
    submitBtn.innerText = 'PROCESSING...';
    submitBtn.disabled = true;
    messageDiv.innerText = '';

    let isValid = true;
    const phoneInput = document.getElementById('cod-phone' + uniqueId);
    if (phoneInput) {
      const phoneErrorDiv = document.getElementById('cod-phone-error' + uniqueId);
      const phoneRegex = new RegExp(phoneInput.pattern);
      if (!phoneRegex.test(phoneInput.value)) {
        phoneErrorDiv.innerText = phoneInput.title;
        phoneErrorDiv.style.display = 'block';
        isValid = false;
      } else {
        phoneErrorDiv.style.display = 'none';
      }
    }
    if (!codForm.checkValidity()) {
        isValid = false;
    }
    if (!isValid) {
      messageDiv.style.color = 'red';
      messageDiv.innerText = 'Please fill out all required fields correctly.';
      submitBtn.innerText = originalBtnText;
      submitBtn.disabled = false;
      return;
    }

    const cartResponse = await fetch('/cart.js');
    const cart = await cartResponse.json();

    if (cart.items.length === 0) {
      messageDiv.style.color = 'red';
      messageDiv.innerText = 'Your cart is empty.';
      submitBtn.innerText = originalBtnText;
      submitBtn.disabled = false;
      return;
    }

    const formData = new FormData(codForm);
    const customerDetails = {
      name: formData.get('name'),
      phone: formData.get('phone'),
      email: formData.get('email'),
      address: formData.get('address'),
      city: formData.get('city'),
      province: formData.get('province'),
    };

    try {
      const backendResponse = await fetch('/apps/cod-proxy/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cartItems: cart.items,
          customer: customerDetails
        }),
      });

      const result = await backendResponse.json();

      if (result.success) {
        messageDiv.style.color = 'green';
        messageDiv.innerText = 'Order placed successfully! Clearing cart...';
        await fetch('/cart/clear.js', { method: 'POST' });

        let redirectUrl = '/pages/thank-you';
        if (result.orderId) {
          redirectUrl += `?order_id=${result.orderId}`;
        }
        window.location.href = redirectUrl;

      } else {
        throw new Error(result.error || 'Failed to create order.');
      }
    } catch (error) {
      console.error('Error:', error);
      messageDiv.style.color = 'red';
      messageDiv.innerText = 'An error occurred: ' + error.message;
      submitBtn.innerText = originalBtnText;
      submitBtn.disabled = false;
    }
  });
});
</script>

{% schema %}
{
  "name": "Popup COD Form",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Buy with Cash on Delivery"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#008060"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Button Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Form Settings"
    },
    {
      "type": "text",
      "id": "form_title",
      "label": "Form Title",
      "default": "Cash on Delivery"
    },
    {
      "type": "text",
      "id": "form_subtitle",
      "label": "Form Subtitle",
      "default": "Please enter your shipping address to complete the order."
    },
    {
      "type": "color",
      "id": "form_bg_color",
      "label": "Form Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "form_text_color",
      "label": "Form Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "form_label_color",
      "label": "Form Label Color",
      "default": "#333333"
    },
    {
      "type": "checkbox",
      "id": "show_phone_field",
      "label": "Show phone number field",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_email_field",
      "label": "Show email field",
      "default": false
    },
    {
        "type": "checkbox",
        "id": "show_address_field",
        "label": "Show address field",
        "default": true
    },
    {
        "type": "checkbox",
        "id": "show_city_field",
        "label": "Show city field",
        "default": true
    }
  ]
}
{% endschema %}
